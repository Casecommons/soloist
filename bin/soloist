#!/usr/bin/env ruby
require 'rubygems'
require "json"
require 'fileutils'
require 'yaml'
require 'tempfile'

def fileify(contents)
  file = Tempfile.new("sololist")
  file << contents
  file.flush
  file
end

def walk_up_and_find_file(filenames)
  pwd = FileUtils.pwd
  file = nil
  path_to_file = ""
  while !file && FileUtils.pwd != '/'
    file = filenames.detect { |f| Dir.glob("*").include?(f) }
    FileUtils.cd("..")
    path_to_file << "../" unless file
  end
  FileUtils.cd(pwd)
  file_contents = File.read(path_to_file + file) if file
  [file_contents, path_to_file]
end

log_level = ENV['LOG_LEVEL'] || "info"

solistrc_contents, soloistrc_path = walk_up_and_find_file(["soloistrc"])
soloistrc = YAML.load(solistrc_contents)

json_contents = {
  :recipes => soloistrc["Recipes"]
}

cookbook_paths = soloistrc["Cookbook_Paths"].map do |v|
  (v =~ /\//) == 0 ? v : "#{FileUtils.pwd}/#{soloistrc_path}/#{v}"
end
puts FileUtils.pwd
puts cookbook_paths.inspect
solo_rb_contents = "cookbook_path #{cookbook_paths.inspect}"

# if ARGV.length >= 1
#   json_config = JSON.parse(File.read(json_file))
#   json_config["recipes"] = ARGV
#   json_file = "/tmp/#{File.basename(json_file)}"
#   puts "OVERRIDING RECIPES: running [#{json_config["recipes"].join(", ")}].  Temp json config file: #{json_file}"
#   File.open(json_file, "w+"){|f| f<<JSON.pretty_generate(json_config) }
# end

solo_rb = fileify(solo_rb_contents)
metadata_json = fileify(json_contents.to_json)

command = "sudo bash -c 'RAILS_ENV=$RAILS_ENV chef-solo -j #{metadata_json.path} -c #{solo_rb.path} -l #{log_level}'"

puts "running chef: " + command
system(command) || exit(1)